syntax = "proto2";

package com.google.cloud.bigquery.storage.test;

import "zetasql/public/proto/type_annotation.proto";

message SupportedTypes {
  optional int32 int32_value = 1;
  optional int64 int64_value = 2;
  optional uint32 uint32_value = 3;
  optional uint64 uint64_value = 4;
  optional fixed32 fixed32_value = 7;
  optional fixed64 fixed64_value = 8;
  optional sfixed32 sfixed32_value = 9;
  optional sfixed64 sfixed64_value = 10;
  optional float float_value = 11;
  optional double double_value = 12;
  optional bool bool_value = 13;
  optional bytes bytes_value = 14;
  optional string string_value = 15;
}

message NonSupportedTypes {
  optional sint32 sint32_value = 5;
  optional sint64 sint64_value = 6;
}

message NonSupportedOneof {
  oneof oneof_value {
    string test1 = 1;
    OneofRecurisve test2 = 2;
  }
}

message OneofRecurisve {
  oneof oneof_value2 {
    string test3 = 3;
    string test4 = 4;
  }
}

message SupportedNestingLvl1 {
  optional SupportedTypes test_supported = 1;
  optional SupportedNestingLvl2 nesting_value = 2;
}

message SupportedNestingLvl2 {
  optional int32 test_int = 1;
}

message SupportedNestingStacked {
  optional int32 test_int = 1;
  optional SupportedNestingLvl1 nesting_value1 = 2;
  optional SupportedNestingLvl1 nesting_value2 = 3;
}

message NonSupportedMap {
  map<int32, int32> map_value = 1;
}

message NonSupportedNestingRecursive {
  optional int32 int_value = 1;
  optional NonSupportedNestingRecursive nesting_value = 2;
}

message NonSupportedNestingContainsRecursive {
  optional int32 int_value = 1;
  optional NonSupportedNestingRecursive nesting_value = 2;
}

message AllFieldModes {
  optional bool optional_mode = 1;
  required bool required_mode = 2;
  repeated bool repeated_mode = 3;
}

message TestExtensions {
  required int32 extension_test = 1  [ (zetasql.format)=DATE ];
  required int32 no_extension = 2;
}

message NonSupportedNestingLvl0 {
  optional NonSupportedNestingLvl1 test1 = 1;
}

message NonSupportedNestingLvl1 {
  optional NonSupportedNestingLvl2 test1 = 1;
}

message NonSupportedNestingLvl2 {
  optional NonSupportedNestingLvl3 test1 = 1;
}

message NonSupportedNestingLvl3 {
  optional NonSupportedNestingLvl4 test1 = 1;
}

message NonSupportedNestingLvl4 {
  optional NonSupportedNestingLvl5 test1 = 1;
}

message NonSupportedNestingLvl5 {
  optional NonSupportedNestingLvl6 test1 = 1;
}

message NonSupportedNestingLvl6 {
  optional NonSupportedNestingLvl7 test1 = 1;
}

message NonSupportedNestingLvl7 {
  optional NonSupportedNestingLvl8 test1 = 1;
}

message NonSupportedNestingLvl8 {
  optional NonSupportedNestingLvl9 test1 = 1;
}

message NonSupportedNestingLvl9 {
  optional NonSupportedNestingLvl10 test1 = 1;
}

message NonSupportedNestingLvl10 {
  optional NonSupportedNestingLvl11 test1 = 1;
}

message NonSupportedNestingLvl11 {
  optional NonSupportedNestingLvl12 test1 = 1;
}

message NonSupportedNestingLvl12 {
  optional NonSupportedNestingLvl13 test1 = 1;
}

message NonSupportedNestingLvl13 {
  optional NonSupportedNestingLvl14 test1 = 1;
}

message NonSupportedNestingLvl14 {
  optional NonSupportedNestingLvl15 test1 = 1;
}

message NonSupportedNestingLvl15 {
  optional NonSupportedNestingLvl16 test1 = 1;
}

message NonSupportedNestingLvl16 {
  optional int32 test1 = 1;
}
